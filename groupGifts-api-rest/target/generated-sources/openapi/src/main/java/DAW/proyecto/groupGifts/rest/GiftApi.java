/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package DAW.proyecto.groupGifts.rest;

import DAW.proyecto.groupGifts.dto.CreateGiftDto;
import DAW.proyecto.groupGifts.dto.GiftDto;
import DAW.proyecto.groupGifts.dto.PartialUpdateGiftDto;
import DAW.proyecto.groupGifts.dto.UpdateGiftDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-11T20:19:36.138872500+01:00[Europe/Madrid]")
@Validated
@Tag(name = "gift-controller", description = "the gift-controller API")
public interface GiftApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /gift
     *
     * @param createGiftDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createGift",
        tags = { "gift-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GiftDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gift",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GiftDto> createGift(
        @Parameter(name = "CreateGiftDto", description = "", required = true) @Valid @RequestBody CreateGiftDto createGiftDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23\", \"image\" : \"image\", \"user_id\" : 1, \"price\" : 6.0274563, \"name\" : \"name\", \"id\" : 0, \"start_date\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gift/filter
     *
     * @param name  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findGifts",
        tags = { "gift-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GiftDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gift/filter",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GiftDto>> findGifts(
        @Parameter(name = "name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "start_date", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date", required = false) String startDate,
        @Parameter(name = "end_date", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date", required = false) String endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"end_date\" : \"2000-01-23\", \"image\" : \"image\", \"user_id\" : 1, \"price\" : 6.0274563, \"name\" : \"name\", \"id\" : 0, \"start_date\" : \"2000-01-23\" }, { \"end_date\" : \"2000-01-23\", \"image\" : \"image\", \"user_id\" : 1, \"price\" : 6.0274563, \"name\" : \"name\", \"id\" : 0, \"start_date\" : \"2000-01-23\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gift/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getGift",
        tags = { "gift-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GiftDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gift/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<GiftDto> getGift(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23\", \"image\" : \"image\", \"user_id\" : 1, \"price\" : 6.0274563, \"name\" : \"name\", \"id\" : 0, \"start_date\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /gift/{id}
     *
     * @param id  (required)
     * @param partialUpdateGiftDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "partialUpdateGift",
        tags = { "gift-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GiftDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/gift/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GiftDto> partialUpdateGift(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "PartialUpdateGiftDto", description = "", required = true) @Valid @RequestBody PartialUpdateGiftDto partialUpdateGiftDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23\", \"image\" : \"image\", \"user_id\" : 1, \"price\" : 6.0274563, \"name\" : \"name\", \"id\" : 0, \"start_date\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /gift/{id}
     *
     * @param id  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "removeGift",
        tags = { "gift-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GiftDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/gift/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<GiftDto> removeGift(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23\", \"image\" : \"image\", \"user_id\" : 1, \"price\" : 6.0274563, \"name\" : \"name\", \"id\" : 0, \"start_date\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /gift/{id}
     *
     * @param id  (required)
     * @param updateGiftDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateGift",
        tags = { "gift-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GiftDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/gift/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GiftDto> updateGift(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UpdateGiftDto", description = "", required = true) @Valid @RequestBody UpdateGiftDto updateGiftDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23\", \"image\" : \"image\", \"user_id\" : 1, \"price\" : 6.0274563, \"name\" : \"name\", \"id\" : 0, \"start_date\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
