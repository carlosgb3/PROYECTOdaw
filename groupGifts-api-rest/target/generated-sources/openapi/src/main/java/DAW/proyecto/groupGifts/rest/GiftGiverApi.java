/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package DAW.proyecto.groupGifts.rest;

import DAW.proyecto.groupGifts.dto.GiftGiverDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-11T20:19:36.138872500+01:00[Europe/Madrid]")
@Validated
@Tag(name = "gift_giver-controller", description = "the gift_giver-controller API")
public interface GiftGiverApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /gift_giver
     *
     * @param giftGiverDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createGiftGiver",
        tags = { "gift_giver-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GiftGiverDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gift_giver",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GiftGiverDto> createGiftGiver(
        @Parameter(name = "GiftGiverDto", description = "", required = true) @Valid @RequestBody GiftGiverDto giftGiverDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gift_id\" : 0, \"giver_id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gift_giver/filter
     *
     * @param giverId  (required)
     * @param giftId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findGiftGiver",
        tags = { "gift_giver-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GiftGiverDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gift_giver/filter",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GiftGiverDto>> findGiftGiver(
        @NotNull @Parameter(name = "giver_id", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "giver_id", required = true) Long giverId,
        @NotNull @Parameter(name = "gift_id", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "gift_id", required = true) Long giftId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"gift_id\" : 0, \"giver_id\" : 6 }, { \"gift_id\" : 0, \"giver_id\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /gift_giver
     *
     * @param giftId  (required)
     * @param giverId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "removeGiftGiver",
        tags = { "gift_giver-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/gift_giver"
    )
    default ResponseEntity<Void> removeGiftGiver(
        @Parameter(name = "gift_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("gift_id") Long giftId,
        @Parameter(name = "giver_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("giver_id") Long giverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /gift_giver
     *
     * @param giftGiverDto  (required)
     * @return OK (status code 200)
     *         or Invalid Gift_giver params (status code 400)
     *         or Gift_giver not found (status code 404)
     */
    @Operation(
        operationId = "updateGiftGiver",
        tags = { "gift_giver-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GiftGiverDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Gift_giver params"),
            @ApiResponse(responseCode = "404", description = "Gift_giver not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/gift_giver",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GiftGiverDto> updateGiftGiver(
        @Parameter(name = "GiftGiverDto", description = "", required = true) @Valid @RequestBody GiftGiverDto giftGiverDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gift_id\" : 0, \"giver_id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
