/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package DAW.proyecto.groupGifts.rest;

import DAW.proyecto.groupGifts.dto.CreateUserDto;
import DAW.proyecto.groupGifts.dto.PartialUpdateUserDto;
import DAW.proyecto.groupGifts.dto.UpdateUserDto;
import DAW.proyecto.groupGifts.dto.UserDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-11T20:19:36.138872500+01:00[Europe/Madrid]")
@Validated
@Tag(name = "user-controller", description = "the user-controller API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user
     *
     * @param createUserDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createUser",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> createUser(
        @Parameter(name = "CreateUserDto", description = "", required = true) @Valid @RequestBody CreateUserDto createUserDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pass\" : \"pass\", \"nick_name\" : \"nick_name\", \"name\" : \"name\", \"surame\" : \"surame\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/filter
     *
     * @param name  (optional)
     * @param surame  (optional)
     * @param nickName  (optional)
     * @param pass  (optional)
     * @param email  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findUsers",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/filter",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserDto>> findUsers(
        @Parameter(name = "name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "surame", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "surame", required = false) String surame,
        @Parameter(name = "nick_name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nick_name", required = false) String nickName,
        @Parameter(name = "pass", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pass", required = false) String pass,
        @Parameter(name = "email", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pass\" : \"pass\", \"nick_name\" : \"nick_name\", \"name\" : \"name\", \"surame\" : \"surame\", \"id\" : 0, \"email\" : \"email\" }, { \"pass\" : \"pass\", \"nick_name\" : \"nick_name\", \"name\" : \"name\", \"surame\" : \"surame\", \"id\" : 0, \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUser",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> getUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pass\" : \"pass\", \"nick_name\" : \"nick_name\", \"name\" : \"name\", \"surame\" : \"surame\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /user/{id}
     *
     * @param id  (required)
     * @param partialUpdateUserDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "partialUpdateUser",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/user/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> partialUpdateUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "PartialUpdateUserDto", description = "", required = true) @Valid @RequestBody PartialUpdateUserDto partialUpdateUserDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pass\" : \"pass\", \"nick_name\" : \"nick_name\", \"name\" : \"name\", \"surame\" : \"surame\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{id}
     *
     * @param id  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "removeUser",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> removeUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pass\" : \"pass\", \"nick_name\" : \"nick_name\", \"name\" : \"name\", \"surame\" : \"surame\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{id}
     *
     * @param id  (required)
     * @param updateUserDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> updateUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UpdateUserDto", description = "", required = true) @Valid @RequestBody UpdateUserDto updateUserDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pass\" : \"pass\", \"nick_name\" : \"nick_name\", \"name\" : \"name\", \"surame\" : \"surame\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
